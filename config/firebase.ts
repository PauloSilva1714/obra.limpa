import { initializeApp, getApps, getApp, FirebaseApp } from 'firebase/app';
import { getAuth, Auth } from 'firebase/auth';
import {
  getFirestore,
  doc,
  getDoc,
  Firestore,
  enableNetwork,
  connectFirestoreEmulator,
  CACHE_SIZE_UNLIMITED,
  initializeFirestore,
} from 'firebase/firestore';
import { getFunctions, Functions } from 'firebase/functions';
import { Platform } from 'react-native';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: "AIzaSyDHJm219NVmB5KdQcLYRgOrp_coC_KbycQ",
  authDomain: "bralimpa2.firebaseapp.com",
  projectId: "bralimpa2",
  storageBucket: "bralimpa2.firebasestorage.app",
  messagingSenderId: "127747660506",
  appId: "1:127747660506:web:b1d89516a0bc22698de3e3"
};

console.log('üî• Inicializando Firebase com config:', {
  apiKey: firebaseConfig.apiKey.substring(0, 10) + '...',
  projectId: firebaseConfig.projectId,
  authDomain: firebaseConfig.authDomain
});

// Initialize Firebase
let app: FirebaseApp;
try {
  if (!getApps().length) {
    console.log('üî• Criando nova inst√¢ncia do Firebase...');
    app = initializeApp(firebaseConfig);
  } else {
    console.log('üî• Usando inst√¢ncia existente do Firebase...');
    app = getApp();
  }
  console.log('‚úÖ Firebase app inicializado:', app.name);
} catch (error) {
  console.error('‚ùå Erro ao inicializar Firebase app:', error);
  throw error;
}

// Initialize Firestore com configura√ß√µes otimizadas
let db: Firestore;
try {
  console.log('üî• Inicializando Firestore...');
  
  // Abordagem mais agressiva para web
  if (Platform.OS === 'web') {
    // Para web, usar configura√ß√£o mais agressiva
    db = initializeFirestore(app, {
      cacheSizeBytes: CACHE_SIZE_UNLIMITED,
      experimentalForceLongPolling: true,
      experimentalAutoDetectLongPolling: false,
    });
    console.log('‚úÖ Firestore inicializado com configura√ß√£o web agressiva');
  } else {
    // Para mobile, usar configura√ß√£o padr√£o
  db = getFirestore(app);
    console.log('‚úÖ Firestore inicializado com configura√ß√£o padr√£o');
  }
  
  // Configura√ß√µes adicionais para melhorar a conectividade
  if (typeof window !== 'undefined') {
    // Configurar timeout mais longo para opera√ß√µes do Firestore
    const originalFetch = window.fetch;
    window.fetch = function(url, options = {}) {
      const urlString = url.toString();
      if (urlString.includes('firestore.googleapis.com')) {
        const newOptions = {
          ...options,
          signal: options.signal || AbortSignal.timeout(60000), // 60 segundos de timeout
        };
        return originalFetch(url, newOptions);
      }
      return originalFetch(url, options);
    };
  }
  
} catch (error) {
  console.error('‚ùå Erro ao inicializar Firestore:', error);
  throw error;
}

// Initialize other Firebase services
let auth: Auth;
let functions: Functions;
let storage: any;

try {
  console.log('üî• Inicializando Auth...');
  auth = getAuth(app);
  console.log('‚úÖ Auth inicializado');
  
  console.log('üî• Inicializando Functions...');
  functions = getFunctions(app);
  console.log('‚úÖ Functions inicializado');
  
  console.log('üî• Inicializando Storage...');
  storage = getStorage(app);
  console.log('‚úÖ Storage inicializado');
} catch (error) {
  console.error('‚ùå Erro ao inicializar servi√ßos Firebase:', error);
  throw error;
}

// The Firebase SDK handles reconnections automatically.
// A manual reconnect function can often complicate things. The "client is offline"
// error usually points to an initial configuration problem (which is now fixed)
// or genuine network issues, not something to be solved by a manual override.

// Function to check if Firestore is online
export const isFirestoreOnline = async (): Promise<boolean> => {
  try {
    console.log('üîç Verificando se Firestore est√° online...');
    
    // Estrat√©gia 1: Verifica√ß√£o simples - apenas criar refer√™ncia
    try {
    const testDocRef = doc(db, 'system', 'online-test');
      if (testDocRef) {
        console.log('‚úÖ Firestore est√° online (refer√™ncia criada com sucesso)');
        return true;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Falha na verifica√ß√£o simples:', error);
    }
    
    // Estrat√©gia 2: Tentar uma opera√ß√£o real com timeout curto
    try {
      const testDocRef = doc(db, 'system', 'online-test');
    const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout')), 3000); // 3 segundos
    });
    
    const getDocPromise = getDoc(testDocRef);
    await Promise.race([getDocPromise, timeoutPromise]);
    
      console.log('‚úÖ Firestore est√° online (opera√ß√£o bem-sucedida)');
    return true;
  } catch (error: any) {
    const errorMessage = error.message || '';
    const errorCode = error.code || '';
    
    console.log('üîç Erro na verifica√ß√£o de online:', { errorCode, errorMessage });
    
      // Se for erro de permiss√£o ou "not found", significa que est√° online
      if (errorMessage.includes('permission') || errorMessage.includes('not found')) {
        console.log('‚úÖ Firestore est√° online (erro esperado de permiss√£o/not found)');
      return true;
    }
    
    // Se for erro de timeout, pode ser problema de rede
    if (errorMessage.includes('Timeout')) {
      console.log('‚ö†Ô∏è Timeout na verifica√ß√£o de online');
      return false;
    }
    
    // Se for erro de "unavailable", est√° offline
      if (errorCode === 'unavailable' || errorMessage.includes('unavailable') || errorMessage.includes('offline')) {
      console.log('‚ùå Firestore est√° offline');
      return false;
    }
    
    // Para outros erros, assumir que est√° online (mais tolerante)
    console.log('‚ö†Ô∏è Erro desconhecido, assumindo que est√° online:', errorMessage);
    return true;
    }
    
  } catch (error: any) {
    console.error('‚ùå Erro geral na verifica√ß√£o de online:', error.message);
    return false;
  }
};

// Function to check Firebase connectivity
export const checkFirebaseConnection = async () => {
  try {
    console.log('üîç Iniciando verifica√ß√£o de conex√£o Firebase...');
    
    // Verificar se o Firebase est√° inicializado corretamente
    if (!app) {
      console.error('‚ùå Firebase app n√£o est√° inicializado');
      return false;
    }

    console.log('‚úÖ Firebase app est√° inicializado:', app.name);

    // Verificar se o Firestore est√° dispon√≠vel
    if (!db) {
      console.error('‚ùå Firestore n√£o est√° inicializado');
      return false;
    }

    console.log('‚úÖ Firestore est√° inicializado');

    // Verificar se h√° conex√£o com a internet (verifica√ß√£o b√°sica)
    if (typeof window !== 'undefined' && !navigator.onLine) {
      console.error('‚ùå Sem conex√£o com a internet');
      return false;
    }

    console.log('‚úÖ Conex√£o com internet OK');

    // Verifica√ß√£o simples: apenas verificar se conseguimos acessar o Firestore
    // sem fazer nenhuma opera√ß√£o que possa falhar por permiss√µes
    try {
      console.log('üîç Testando acesso ao Firestore...');
      
      // Apenas verificar se conseguimos criar uma refer√™ncia
      const testDocRef = doc(db, 'system', 'connection-test');
      console.log('‚úÖ Refer√™ncia do documento criada com sucesso');
      
      // N√£o vamos tentar ler o documento, apenas verificar se a refer√™ncia √© v√°lida
      if (testDocRef) {
        console.log('‚úÖ Firebase connection is OK - refer√™ncia v√°lida criada');
        return true;
      } else {
        console.error('‚ùå Falha ao criar refer√™ncia do documento');
        return false;
      }
      
    } catch (firestoreError: any) {
      console.error('‚ùå Erro ao acessar Firestore:', firestoreError.message);
      return false;
    }
  } catch (error: any) {
    console.error('‚ùå Erro geral na verifica√ß√£o de conex√£o:', error.message);
    return false;
  }
};

// A simpler reconnect function, just in case. It's better to let the SDK handle this.
export const reconnectFirebase = async () => {
  try {
    console.log('Attempting to re-enable Firebase network...');
    await enableNetwork(db);
    console.log('Firebase network re-enabled successfully.');
    return true;
  } catch (error) {
    console.error('Error re-enabling Firebase network:', error);
    return false;
  }
};

// Fun√ß√£o para for√ßar reconex√£o e verificar conectividade
export const forceReconnectAndCheck = async (): Promise<boolean> => {
  try {
    console.log('üîÑ For√ßando reconex√£o do Firebase...');
    
    // Estrat√©gia 1: Tentar reconectar usando enableNetwork
    try {
      await reconnectFirebase();
      console.log('‚úÖ Reconex√£o via enableNetwork bem-sucedida');
    } catch (error) {
      console.warn('‚ö†Ô∏è Falha na reconex√£o via enableNetwork:', error);
    }
    
    // Estrat√©gia 2: Aguardar um pouco para a reconex√£o se estabelecer
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Estrat√©gia 3: Tentar uma opera√ß√£o simples para verificar se a conex√£o foi restaurada
    try {
      const testDocRef = doc(db, 'system', 'reconnection-test');
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout na verifica√ß√£o de reconex√£o')), 5000);
      });
      
      const getDocPromise = getDoc(testDocRef);
      await Promise.race([getDocPromise, timeoutPromise]);
      
      console.log('‚úÖ Reconex√£o bem-sucedida!');
      return true;
    } catch (error: any) {
      const errorMessage = error.message || '';
      
      // Se for erro de permiss√£o ou "not found", significa que est√° online
      if (errorMessage.includes('permission') || errorMessage.includes('not found')) {
        console.log('‚úÖ Reconex√£o bem-sucedida (erro esperado de permiss√£o/not found)');
        return true;
      }
      
      // Se for erro de timeout, tentar uma √∫ltima vez
      if (errorMessage.includes('Timeout')) {
        console.log('‚ö†Ô∏è Timeout na verifica√ß√£o de reconex√£o, tentando uma √∫ltima vez...');
        
        // Aguardar mais um pouco e tentar novamente
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
          const testDocRef2 = doc(db, 'system', 'final-test');
          const timeoutPromise2 = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout final')), 3000);
          });
          
          const getDocPromise2 = getDoc(testDocRef2);
          await Promise.race([getDocPromise2, timeoutPromise2]);
          
          console.log('‚úÖ Reconex√£o bem-sucedida na segunda tentativa!');
          return true;
        } catch (finalError: any) {
          if (finalError.message.includes('permission') || finalError.message.includes('not found')) {
            console.log('‚úÖ Reconex√£o bem-sucedida na segunda tentativa (erro esperado)');
            return true;
          }
        }
      }
      
      console.log('‚ùå Reconex√£o falhou. Firestore ainda est√° offline.');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erro durante reconex√£o for√ßada:', error);
    return false;
  }
};

// Fun√ß√£o para reinicializar o Firestore com configura√ß√µes b√°sicas
export const reinitializeFirestore = async (): Promise<boolean> => {
  try {
    console.log('üîÑ Reinicializando Firestore com configura√ß√µes b√°sicas...');
    
    // Tentar reinicializar com configura√ß√µes mais b√°sicas
    try {
      // Configura√ß√µes m√≠nimas para web
      if (Platform.OS === 'web') {
        db = initializeFirestore(app, {
          cacheSizeBytes: CACHE_SIZE_UNLIMITED,
        });
        console.log('‚úÖ Firestore reinicializado com configura√ß√µes b√°sicas');
      } else {
        db = getFirestore(app);
        console.log('‚úÖ Firestore reinicializado com configura√ß√£o padr√£o');
      }
      
      // Aguardar um pouco para a inicializa√ß√£o se estabelecer
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Testar se a reinicializa√ß√£o funcionou
      const testDocRef = doc(db, 'system', 'reinit-test');
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout na verifica√ß√£o de reinicializa√ß√£o')), 5000);
      });
      
      const getDocPromise = getDoc(testDocRef);
      await Promise.race([getDocPromise, timeoutPromise]);
      
      console.log('‚úÖ Reinicializa√ß√£o bem-sucedida!');
      return true;
      
    } catch (error: any) {
      const errorMessage = error.message || '';
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (errorMessage.includes('permission') || errorMessage.includes('not found')) {
        console.log('‚úÖ Reinicializa√ß√£o bem-sucedida (erro esperado de permiss√£o/not found)');
        return true;
      }
      
      console.log('‚ùå Reinicializa√ß√£o falhou:', errorMessage);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante reinicializa√ß√£o:', error);
    return false;
  }
};

// Fun√ß√£o para tentar reinicializa√ß√£o completa do Firestore com configura√ß√µes alternativas
export const tryAlternativeFirestoreConfig = async (): Promise<boolean> => {
  try {
    console.log('üîÑ Tentando reinicializa√ß√£o com configura√ß√µes alternativas...');
    
    // Tentar diferentes configura√ß√µes
    const configs = [
      {
        name: 'Configura√ß√£o m√≠nima',
        config: {}
      },
      {
        name: 'Configura√ß√£o com cache limitado',
        config: {
          cacheSizeBytes: 50 * 1024 * 1024, // 50MB
        }
      },
      {
        name: 'Configura√ß√£o com polling longo',
        config: {
          experimentalForceLongPolling: true,
        }
      },
      {
        name: 'Configura√ß√£o padr√£o',
        config: undefined
      }
    ];
    
    for (const configOption of configs) {
      try {
        console.log(`üîç Tentando: ${configOption.name}`);
        
        if (Platform.OS === 'web') {
          if (configOption.config) {
            db = initializeFirestore(app, configOption.config);
          } else {
            db = getFirestore(app);
          }
        } else {
          db = getFirestore(app);
        }
        
        // Aguardar um pouco para a inicializa√ß√£o se estabelecer
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Testar se a configura√ß√£o funcionou
        const testDocRef = doc(db, 'system', 'alt-config-test');
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout')), 5000);
        });
        
        const getDocPromise = getDoc(testDocRef);
        await Promise.race([getDocPromise, timeoutPromise]);
        
        console.log(`‚úÖ ${configOption.name} funcionou!`);
        return true;
        
      } catch (error: any) {
        const errorMessage = error.message || '';
        
        // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
        if (errorMessage.includes('permission') || errorMessage.includes('not found')) {
          console.log(`‚úÖ ${configOption.name} funcionou (erro esperado)!`);
          return true;
        }
        
        console.log(`‚ùå ${configOption.name} falhou:`, errorMessage);
        continue;
      }
    }
    
    console.log('‚ùå Todas as configura√ß√µes alternativas falharam');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro durante tentativa de configura√ß√£o alternativa:', error);
    return false;
  }
};

// Fun√ß√£o para tentar opera√ß√µes do Firestore com abordagem ass√≠ncrona
export const tryFirestoreOperation = async <T>(
  operation: () => Promise<T>,
  maxAttempts: number = 3,
  delayBetweenAttempts: number = 2000
): Promise<T> => {
  let lastError: any;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      console.log(`üîÑ Tentativa ${attempt}/${maxAttempts} da opera√ß√£o do Firestore...`);
      
      // Aguardar um pouco antes de cada tentativa (exceto a primeira)
      if (attempt > 1) {
        await new Promise(resolve => setTimeout(resolve, delayBetweenAttempts));
      }
      
      // Tentar a opera√ß√£o
      const result = await operation();
      console.log(`‚úÖ Opera√ß√£o do Firestore bem-sucedida na tentativa ${attempt}`);
      return result;
      
    } catch (error: any) {
      lastError = error;
      console.log(`‚ùå Tentativa ${attempt} falhou:`, error.message);
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log(`‚úÖ Opera√ß√£o funcionando (erro esperado) na tentativa ${attempt}`);
        throw error; // Propagar o erro esperado
      }
      
      // Se for erro de timeout ou offline, continuar para a pr√≥xima tentativa
      if (error.message.includes('Timeout') || error.message.includes('offline') || error.message.includes('unavailable')) {
        if (attempt < maxAttempts) {
          console.log(`‚è≥ Aguardando antes da pr√≥xima tentativa...`);
          continue;
        }
      }
      
      // Para outros erros, n√£o tentar novamente
      throw error;
    }
  }
  
  // Se chegou aqui, todas as tentativas falharam
  console.error(`‚ùå Todas as ${maxAttempts} tentativas falharam`);
  throw lastError;
};

// Fun√ß√£o para testar diferentes abordagens de conectividade
export const testFirestoreConnectivity = async (): Promise<{
  success: boolean;
  method: string;
  error?: string;
  details?: any;
}> => {
  const tests = [
    {
      name: 'Teste b√°sico - apenas refer√™ncia',
      test: async () => {
        const testDocRef = doc(db, 'system', 'connectivity-test');
        return { success: true, docRef: testDocRef };
      }
    },
    {
      name: 'Teste com timeout curto',
      test: async () => {
        const testDocRef = doc(db, 'system', 'connectivity-test');
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout')), 2000);
        });
        
        const getDocPromise = getDoc(testDocRef);
        await Promise.race([getDocPromise, timeoutPromise]);
        return { success: true };
      }
    },
    {
      name: 'Teste com timeout longo',
      test: async () => {
        const testDocRef = doc(db, 'system', 'connectivity-test');
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout')), 10000);
        });
        
        const getDocPromise = getDoc(testDocRef);
        await Promise.race([getDocPromise, timeoutPromise]);
        return { success: true };
      }
    }
  ];
  
  for (const testCase of tests) {
    try {
      console.log(`üîç Executando: ${testCase.name}`);
      const result = await testCase.test();
      console.log(`‚úÖ ${testCase.name} - Sucesso`);
      return {
        success: true,
        method: testCase.name,
        details: result
      };
    } catch (error: any) {
      console.log(`‚ùå ${testCase.name} - Falhou:`, error.message);
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log(`‚úÖ ${testCase.name} - Funcionando (erro esperado)`);
        return {
          success: true,
          method: testCase.name,
          details: { error: error.message, expected: true }
        };
      }
      
      // Se for erro de timeout ou offline, continuar para o pr√≥ximo teste
      if (error.message.includes('Timeout') || error.message.includes('offline') || error.message.includes('unavailable')) {
        continue;
      }
      
      // Para outros erros, retornar o erro
      return {
        success: false,
        method: testCase.name,
        error: error.message,
        details: error
      };
    }
  }
  
  return {
    success: false,
    method: 'Todos os testes falharam',
    error: 'Todas as tentativas de conectividade falharam'
  };
};

// Fun√ß√£o para verificar se h√° problemas de CORS ou configura√ß√£o
export const checkFirebaseConfiguration = async (): Promise<{
  isConfigured: boolean;
  issues: string[];
}> => {
  const issues: string[] = [];
  
  try {
    // Verificar se as configura√ß√µes b√°sicas est√£o presentes
    if (!firebaseConfig.apiKey || firebaseConfig.apiKey === '') {
      issues.push('API Key n√£o configurada');
    }
    
    if (!firebaseConfig.projectId || firebaseConfig.projectId === '') {
      issues.push('Project ID n√£o configurado');
    }
    
    if (!firebaseConfig.authDomain || firebaseConfig.authDomain === '') {
      issues.push('Auth Domain n√£o configurado');
    }
    
    // Verificar se o app foi inicializado corretamente
    if (!app) {
      issues.push('Firebase app n√£o foi inicializado');
    }
    
    // Verificar se o Firestore foi inicializado
    if (!db) {
      issues.push('Firestore n√£o foi inicializado');
    }
    
    // Verificar se estamos no ambiente web e se h√° problemas de CORS
    if (typeof window !== 'undefined') {
      try {
        // Tentar fazer uma requisi√ß√£o simples para verificar CORS
        const response = await fetch(`https://${firebaseConfig.projectId}.firebaseapp.com/.well-known/__/firebase/init.json`);
        if (!response.ok) {
          issues.push('Poss√≠vel problema de CORS detectado');
        }
      } catch (corsError) {
        issues.push('Erro de CORS detectado');
      }
    }
    
    return {
      isConfigured: issues.length === 0,
      issues
    };
  } catch (error) {
    issues.push(`Erro ao verificar configura√ß√£o: ${error}`);
    return {
      isConfigured: false,
      issues
    };
  }
};

// Fun√ß√£o para tentar opera√ß√µes do Firestore de forma mais simples
export const simpleFirestoreOperation = async <T>(
  operation: () => Promise<T>,
  maxWaitTime: number = 30000
): Promise<T> => {
  try {
    console.log('üîÑ Tentando opera√ß√£o simples do Firestore...');
    
    // Aguardar um pouco para garantir que o Firestore est√° pronto
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Tentar a opera√ß√£o com timeout
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout na opera√ß√£o simples')), maxWaitTime);
    });
    
    const operationPromise = operation();
    const result = await Promise.race([operationPromise, timeoutPromise]) as T;
    
    console.log('‚úÖ Opera√ß√£o simples bem-sucedida');
    return result;
    
  } catch (error: any) {
    console.log('‚ùå Opera√ß√£o simples falhou:', error.message);
    
    // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
    if (error.message.includes('permission') || error.message.includes('not found')) {
      console.log('‚úÖ Opera√ß√£o funcionando (erro esperado)');
      throw error; // Propagar o erro esperado
    }
    
    // Para outros erros, tentar uma √∫ltima vez sem timeout
    try {
      console.log('üîÑ Tentando opera√ß√£o sem timeout...');
      const result = await operation();
      console.log('‚úÖ Opera√ß√£o sem timeout bem-sucedida');
      return result;
    } catch (finalError: any) {
      console.log('‚ùå Opera√ß√£o sem timeout tamb√©m falhou:', finalError.message);
      throw finalError;
    }
  }
};

// Fun√ß√£o para diagnosticar e tentar resolver problemas espec√≠ficos de conectividade
export const diagnoseAndFixFirestoreIssue = async (): Promise<{
  success: boolean;
  issue: string;
  solution: string;
}> => {
  try {
    console.log('üîç Iniciando diagn√≥stico avan√ßado do Firestore...');
    
    // Teste 1: Verificar se conseguimos fazer uma requisi√ß√£o HTTP direta
    try {
      console.log('üîç Teste 1: Verificando conectividade HTTP direta...');
      const response = await fetch(`https://firestore.googleapis.com/v1/projects/${firebaseConfig.projectId}/databases/(default)/documents`);
      
      if (response.ok) {
        console.log('‚úÖ Conectividade HTTP direta OK');
        return {
          success: true,
          issue: 'Conectividade OK',
          solution: 'Problema pode estar na configura√ß√£o do SDK'
        };
      } else {
        console.log('‚ùå Conectividade HTTP direta falhou:', response.status);
        return {
          success: false,
          issue: 'Problema de conectividade HTTP',
          solution: 'Verificar firewall ou proxy'
        };
      }
    } catch (httpError) {
      console.log('‚ùå Erro na conectividade HTTP:', httpError);
    }
    
    // Teste 2: Verificar se o projeto est√° ativo
    try {
      console.log('üîç Teste 2: Verificando status do projeto...');
      const response = await fetch(`https://${firebaseConfig.projectId}.firebaseapp.com/.well-known/__/firebase/init.json`);
      
      if (response.ok) {
        console.log('‚úÖ Projeto Firebase ativo');
      } else {
        console.log('‚ùå Projeto Firebase inativo ou com problema');
        return {
          success: false,
          issue: 'Projeto Firebase inativo',
          solution: 'Verificar status do projeto no Firebase Console'
        };
      }
    } catch (projectError) {
      console.log('‚ùå Erro ao verificar projeto:', projectError);
    }
    
    // Teste 3: Tentar reinicializar com configura√ß√µes completamente diferentes
    try {
      console.log('üîç Teste 3: Tentando reinicializa√ß√£o completa...');
      
      // For√ßar reinicializa√ß√£o completa
      if (Platform.OS === 'web') {
        // Tentar configura√ß√£o mais b√°sica poss√≠vel
        db = initializeFirestore(app, {
          cacheSizeBytes: 10 * 1024 * 1024, // 10MB apenas
        });
      } else {
        db = getFirestore(app);
      }
      
      // Aguardar mais tempo para a inicializa√ß√£o
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Testar com uma opera√ß√£o simples usando a nova fun√ß√£o
      const testDocRef = doc(db, 'system', 'diagnostic-test');
      const result = await simpleFirestoreOperation(
        () => getDoc(testDocRef),
        30000 // 30 segundos
      );
      
      console.log('‚úÖ Reinicializa√ß√£o completa bem-sucedida');
      return {
        success: true,
        issue: 'Reinicializa√ß√£o resolveu o problema',
        solution: 'Configura√ß√£o otimizada aplicada'
      };
      
    } catch (reinitError: any) {
      console.log('‚ùå Reinicializa√ß√£o falhou:', reinitError.message);
      
      // Se for erro de permiss√£o, significa que est√° funcionando
      if (reinitError.message.includes('permission') || reinitError.message.includes('not found')) {
        console.log('‚úÖ Reinicializa√ß√£o funcionou (erro esperado)');
        return {
          success: true,
          issue: 'Reinicializa√ß√£o resolveu o problema',
          solution: 'Configura√ß√£o otimizada aplicada'
        };
      }
    }
    
    // Teste 4: Verificar se h√° problema com as regras de seguran√ßa
    try {
      console.log('üîç Teste 4: Verificando regras de seguran√ßa...');
      
      // Tentar acessar um documento que sabemos que n√£o existe
      const testDocRef = doc(db, 'test-collection', 'test-doc');
      await getDoc(testDocRef);
      
    } catch (rulesError: any) {
      if (rulesError.code === 'permission-denied') {
        console.log('‚ùå Problema com regras de seguran√ßa detectado');
        return {
          success: false,
          issue: 'Regras de seguran√ßa muito restritivas',
          solution: 'Verificar regras do Firestore no Firebase Console'
        };
      }
    }
    
    // Se chegou aqui, o problema √© mais complexo
    return {
      success: false,
      issue: 'Problema complexo de conectividade',
      solution: 'Verificar configura√ß√£o do projeto e rede'
    };
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico avan√ßado:', error);
    return {
      success: false,
      issue: 'Erro no diagn√≥stico',
      solution: 'Verificar logs para mais detalhes'
    };
  }
};

// Fun√ß√£o para tentar resolver o problema espec√≠fico de "client is offline"
export const fixClientOfflineIssue = async (): Promise<boolean> => {
  try {
    console.log('üîß Tentando resolver problema espec√≠fico de "client is offline"...');
    
    // Estrat√©gia 1: For√ßar reconex√£o da rede
    try {
      await enableNetwork(db);
      console.log('‚úÖ Rede reabilitada');
    } catch (error) {
      console.log('‚ö†Ô∏è Falha ao reabilitar rede:', error);
    }
    
    // Estrat√©gia 2: Aguardar mais tempo para a conex√£o se estabelecer
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // Estrat√©gia 3: Tentar uma opera√ß√£o muito simples
    try {
      const testDocRef = doc(db, 'system', 'offline-fix-test');
      
      // Tentar sem timeout primeiro
      await getDoc(testDocRef);
      console.log('‚úÖ Opera√ß√£o simples bem-sucedida');
      return true;
    } catch (error: any) {
      console.log('‚ö†Ô∏è Opera√ß√£o simples falhou:', error.message);
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log('‚úÖ Opera√ß√£o funcionando (erro esperado)');
        return true;
      }
      
      // Estrat√©gia 4: Tentar com timeout mais longo
      try {
        const testDocRef2 = doc(db, 'system', 'offline-fix-test-2');
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout')), 30000);
        });
        
        const getDocPromise = getDoc(testDocRef2);
        await Promise.race([getDocPromise, timeoutPromise]);
        
        console.log('‚úÖ Opera√ß√£o com timeout bem-sucedida');
        return true;
      } catch (timeoutError: any) {
        console.log('‚ö†Ô∏è Opera√ß√£o com timeout falhou:', timeoutError.message);
        
        if (timeoutError.message.includes('permission') || timeoutError.message.includes('not found')) {
          console.log('‚úÖ Opera√ß√£o funcionando (erro esperado)');
          return true;
        }
      }
    }
    
    console.log('‚ùå N√£o foi poss√≠vel resolver o problema de "client is offline"');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro ao tentar resolver problema:', error);
    return false;
  }
};

// Fun√ß√£o para tentar uma abordagem completamente diferente
export const tryAlternativeApproach = async (): Promise<boolean> => {
  try {
    console.log('üîÑ Tentando abordagem alternativa...');
    
    // Estrat√©gia 1: Tentar reinicializar o Firestore com configura√ß√µes completamente diferentes
    try {
      // For√ßar reinicializa√ß√£o com configura√ß√µes m√≠nimas
      if (Platform.OS === 'web') {
        db = initializeFirestore(app, {});
      } else {
        db = getFirestore(app);
      }
      
      // Aguardar mais tempo para a inicializa√ß√£o
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Tentar uma opera√ß√£o muito simples
      const testDocRef = doc(db, 'system', 'alternative-test');
      await getDoc(testDocRef);
      
      console.log('‚úÖ Abordagem alternativa bem-sucedida');
      return true;
      
    } catch (error: any) {
      console.log('‚ö†Ô∏è Abordagem alternativa falhou:', error.message);
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log('‚úÖ Abordagem alternativa funcionou (erro esperado)');
        return true;
      }
    }
    
    // Estrat√©gia 2: Tentar com timeout muito longo
    try {
      const testDocRef2 = doc(db, 'system', 'alternative-test-2');
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout')), 60000); // 60 segundos
      });
      
      const getDocPromise = getDoc(testDocRef2);
      await Promise.race([getDocPromise, timeoutPromise]);
      
      console.log('‚úÖ Abordagem alternativa com timeout longo bem-sucedida');
      return true;
      
    } catch (error: any) {
      console.log('‚ö†Ô∏è Abordagem alternativa com timeout falhou:', error.message);
      
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log('‚úÖ Abordagem alternativa funcionou (erro esperado)');
        return true;
      }
    }
    
    console.log('‚ùå Abordagem alternativa falhou');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro na abordagem alternativa:', error);
    return false;
  }
};

// Fun√ß√£o espec√≠fica para resolver o problema "client is offline" no ambiente web
export const fixWebClientOfflineIssue = async (): Promise<boolean> => {
  try {
    console.log('üîß Tentando resolver problema espec√≠fico de "client is offline" no ambiente web...');
    
    // Estrat√©gia 1: For√ßar reinicializa√ß√£o completa do Firestore para web
    if (Platform.OS === 'web') {
      try {
        console.log('üîÑ Reinicializando Firestore com configura√ß√µes espec√≠ficas para web...');
        
        // Configura√ß√£o mais agressiva para web
        db = initializeFirestore(app, {
          cacheSizeBytes: CACHE_SIZE_UNLIMITED,
          experimentalForceLongPolling: true,
          experimentalAutoDetectLongPolling: false,
        });
        
        console.log('‚úÖ Firestore reinicializado com configura√ß√µes web espec√≠ficas');
        
        // Aguardar mais tempo para a inicializa√ß√£o se estabelecer
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // Testar se a reinicializa√ß√£o funcionou
        const testDocRef = doc(db, 'system', 'web-fix-test');
        const timeoutPromise = new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Timeout')), 10000);
        });
        
        const getDocPromise = getDoc(testDocRef);
        await Promise.race([getDocPromise, timeoutPromise]);
        
        console.log('‚úÖ Reinicializa√ß√£o web espec√≠fica bem-sucedida');
        return true;
        
      } catch (error: any) {
        console.log('‚ö†Ô∏è Reinicializa√ß√£o web espec√≠fica falhou:', error.message);
        
        // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
        if (error.message.includes('permission') || error.message.includes('not found')) {
          console.log('‚úÖ Reinicializa√ß√£o web espec√≠fica funcionou (erro esperado)');
          return true;
        }
      }
    }
    
    // Estrat√©gia 2: Tentar com configura√ß√£o completamente diferente
    try {
      console.log('üîÑ Tentando configura√ß√£o alternativa para web...');
      
      if (Platform.OS === 'web') {
        // Configura√ß√£o m√≠nima poss√≠vel
        db = initializeFirestore(app, {});
      }
      
      // Aguardar para a inicializa√ß√£o
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Testar com opera√ß√£o simples
      const testDocRef = doc(db, 'system', 'alt-web-test');
      await getDoc(testDocRef);
      
      console.log('‚úÖ Configura√ß√£o alternativa web bem-sucedida');
      return true;
      
    } catch (error: any) {
      console.log('‚ö†Ô∏è Configura√ß√£o alternativa web falhou:', error.message);
      
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log('‚úÖ Configura√ß√£o alternativa web funcionou (erro esperado)');
        return true;
      }
    }
    
    // Estrat√©gia 3: Tentar com timeout muito longo
    try {
      console.log('üîÑ Tentando com timeout muito longo...');
      
      const testDocRef = doc(db, 'system', 'long-timeout-test');
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout muito longo')), 30000); // 30 segundos
      });
      
      const getDocPromise = getDoc(testDocRef);
      await Promise.race([getDocPromise, timeoutPromise]);
      
      console.log('‚úÖ Opera√ß√£o com timeout longo bem-sucedida');
      return true;
      
    } catch (error: any) {
      console.log('‚ö†Ô∏è Opera√ß√£o com timeout longo falhou:', error.message);
      
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log('‚úÖ Opera√ß√£o com timeout longo funcionou (erro esperado)');
        return true;
      }
    }
    
    console.log('‚ùå N√£o foi poss√≠vel resolver o problema de "client is offline" no ambiente web');
    return false;
    
  } catch (error) {
    console.error('‚ùå Erro ao tentar resolver problema web:', error);
    return false;
  }
};

// Fun√ß√£o para tentar opera√ß√µes do Firestore com abordagem espec√≠fica para web
export const tryWebFirestoreOperation = async <T>(
  operation: () => Promise<T>,
  maxAttempts: number = 5,
  delayBetweenAttempts: number = 3000
): Promise<T> => {
  let lastError: any;
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      console.log(`üîÑ Tentativa ${attempt}/${maxAttempts} da opera√ß√£o web do Firestore...`);
      
      // Aguardar um pouco antes de cada tentativa (exceto a primeira)
      if (attempt > 1) {
        await new Promise(resolve => setTimeout(resolve, delayBetweenAttempts));
        
        // Na segunda tentativa, tentar resolver o problema espec√≠fico
        if (attempt === 2) {
          console.log('üîß Tentando resolver problema espec√≠fico na segunda tentativa...');
          await fixWebClientOfflineIssue();
        }
      }
      
      // Tentar a opera√ß√£o
      const result = await operation();
      console.log(`‚úÖ Opera√ß√£o web do Firestore bem-sucedida na tentativa ${attempt}`);
      return result;
      
    } catch (error: any) {
      lastError = error;
      console.log(`‚ùå Tentativa ${attempt} falhou:`, error.message);
      
      // Se for erro de permiss√£o ou "not found", significa que est√° funcionando
      if (error.message.includes('permission') || error.message.includes('not found')) {
        console.log(`‚úÖ Opera√ß√£o funcionando (erro esperado) na tentativa ${attempt}`);
        throw error; // Propagar o erro esperado
      }
      
      // Se for erro de "client is offline", tentar resolver especificamente
      if (error.message.includes('client is offline') || error.message.includes('offline')) {
        if (attempt < maxAttempts) {
          console.log(`üîß Tentando resolver problema "client is offline" na tentativa ${attempt + 1}...`);
          await fixWebClientOfflineIssue();
          continue;
        }
      }
      
      // Se for erro de timeout ou unavailable, continuar para a pr√≥xima tentativa
      if (error.message.includes('Timeout') || error.message.includes('unavailable')) {
        if (attempt < maxAttempts) {
          console.log(`‚è≥ Aguardando antes da pr√≥xima tentativa...`);
          continue;
        }
      }
      
      // Para outros erros, n√£o tentar novamente
      throw error;
    }
  }
  
  // Se chegou aqui, todas as tentativas falharam
  console.error(`‚ùå Todas as ${maxAttempts} tentativas falharam`);
  throw lastError;
};

export { app, db, auth, functions };
