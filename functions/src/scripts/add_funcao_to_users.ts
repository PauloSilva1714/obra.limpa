import * as admin from 'firebase-admin';
import * as path from 'path';

// Ajuste o caminho do serviceAccountKey.json conforme necess√°rio
const serviceAccount = require(path.resolve(__dirname, '../../serviceAccountKey.json'));

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const db = admin.firestore();

async function addFuncaoToUsers() {
  console.log('üîç Iniciando verifica√ß√£o e atualiza√ß√£o do campo funcao...');
  
  const usersSnapshot = await db.collection('users').get();
  console.log(`üìä Total de usu√°rios encontrados: ${usersSnapshot.docs.length}`);

  let updatedCount = 0;
  let skippedCount = 0;

  for (const doc of usersSnapshot.docs) {
    const userData = doc.data();
    
    // Verificar se o campo funcao j√° existe
    if (userData.funcao !== undefined) {
      console.log(`‚è≠Ô∏è Usu√°rio ${userData.name} (${doc.id}) j√° possui funcao: "${userData.funcao}"`);
      skippedCount++;
      continue;
    }

    // Definir fun√ß√£o baseada no role do usu√°rio
    let funcao = 'Fun√ß√£o n√£o informada';
    
    if (userData.role === 'admin') {
      funcao = 'Administrador';
    } else if (userData.role === 'worker') {
      funcao = 'Colaborador';
    }

    await doc.ref.update({ funcao });
    console.log(`‚úÖ Usu√°rio ${userData.name} (${doc.id}) atualizado com funcao: "${funcao}"`);
    updatedCount++;
  }

  console.log('\nüìà Resumo da opera√ß√£o:');
  console.log(`‚úÖ Usu√°rios atualizados: ${updatedCount}`);
  console.log(`‚è≠Ô∏è Usu√°rios ignorados (j√° possuem funcao): ${skippedCount}`);
  console.log(`üìä Total processado: ${usersSnapshot.docs.length}`);
}

addFuncaoToUsers()
  .then(() => {
    console.log('\nüéâ Opera√ß√£o conclu√≠da com sucesso!');
    process.exit(0);
  })
  .catch((err) => {
    console.error('‚ùå Erro ao atualizar usu√°rios:', err);
    process.exit(1);
  }); 